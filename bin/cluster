#!/usr/bin/env python3

import numpy as np
import ROOT as r

import pathlib
import os

from beamtools.trigger import cluster

from argparse import ArgumentParser

parser = ArgumentParser(description='Construct clusters from pixels above threshold')

parser.add_argument('files', nargs = '+', help = "pick npz files that contain data for clustering")
parser.add_argument('--thresh', type = float, help = "set distance threshold", required = True)
parser.add_argument('--cluster', type = int, help = "pick a clustering algorithm.  1: DBSCAN, 2: Agglomerative Clustering", default = 1)
parser.add_argument('--out', default='cluster', help = 'sets directory for .npz files to be saved into.')
parser.add_argument('--trackfile', help='ROOT file to store distribution of tracks')
parser.add_argument('--average', action='store_true', help='Use weighted averages for xy coordinates instead of max')
parser.add_argument('--black', type=float, help='Black level to be used in weighted average')

args = parser.parse_args()

if args.trackfile:
    trackfile = r.TFile(args.trackfile, 'recreate')
    t = r.TTree('hits', 'Pixel hits')

    # metadata
    timestamps = np.array([0], dtype=int)
    tags = np.array([''], dtype='|S24')
    phones = np.array([''], dtype='|S17')

    t.Branch('t', timestamps, 't/i')
    t.Branch('tag', tags, 'tag/C')
    t.Branch('phone', phones, 'phone/C')

    # individual pixel positions
    x_vec = r.vector('Int_t')()
    y_vec = r.vector('Int_t')()
    val_vec = r.vector('UInt_t')() 
     
    t.Branch('pix_x', x_vec)
    t.Branch('pix_y', y_vec)
    t.Branch('pix_val', val_vec)

    # absolute positions
    max_x = np.array([0], dtype=int)
    max_y = np.array([0], dtype=int)

    t.Branch('max_x', max_x, 'max_x/i')
    t.Branch('max_y', max_y, 'max_y/i') 


for i,fname in enumerate(map(os.path.realpath, args.files)):
    print('{} / {}'.format(i+1, len(args.files)), end='\r')
    
    head, base = os.path.split(fname)
    head, _ = os.path.split(head)
    head, phone = os.path.split(head)
    head, tag = os.path.split(head)

    f = np.load(fname)
    x = f['x']
    y = f['y']
    val = f['val']
    res_x = f['res_x']
    res_y = f['res_y']
    f.close()

    if x.size > 1000000: 
        print('Bad frame -- skipping ({})'.format(fname))
        continue

    groups = cluster(x, y, args.thresh, args.cluster)

    # make fixed length containers to increase speed
    n_groups = len(groups)
    x_gp = np.zeros(n_groups)
    y_gp = np.zeros(n_groups)
    max_val = np.zeros(n_groups)
    tot_val = np.zeros(n_groups)
    n_pix = np.zeros(n_groups)

    data = np.column_stack([x,y,val])

    for j, gp in enumerate(groups):
        gx, gy, gval = data[gp].transpose()
        
        idx_max = np.argmax(gval) 
        val_sum = gval.sum()

        max_val[j] = gval[idx_max]
        tot_val[j] = val_sum
        n_pix[j] = gval.size

        x_gp[j] = (gx * gval).sum() / val_sum if args.average else gx[idx_max]
        y_gp[j] = (gy * gval).sum() / val_sum if args.average else gy[idx_max]

        if args.trackfile:
            timestamps[0] = int(base[-17:-4])
            phones[0] = phone + '\0'
            tags[0] = tag[10:] + '\0'
            
            max_x[0] = gx[idx_max]
            max_y[0] = gy[idx_max]

            for ix, iy, ival in zip(gx, gy, gval):
                x_vec.push_back(int(ix - max_x[0]))
                y_vec.push_back(int(iy - max_y[0]))
                val_vec.push_back(int(ival))
        
            t.Fill()
            x_vec.clear()
            y_vec.clear()
            val_vec.clear()

    inpath = pathlib.PurePath(os.path.realpath(fname))
    outdir = pathlib.Path(inpath.parent.parent.joinpath(args.out))
    if not outdir.is_dir():
        outdir.mkdir(parents = True)

    outbase = inpath
    while outbase.suffix:
        outbase = pathlib.PurePath(outbase.stem)
    outbase = outbase.name

    outfile = str(outdir.joinpath(outbase + '.npz'))
        
    np.savez(outfile, 
            x=x_gp, 
            y=y_gp,
            threshold=args.thresh,
            max_val=max_val, 
            tot_val=tot_val,
            n_pix=n_pix,
            n_clusters=max_val.size,
            res_x=res_x,
            res_y=res_y,)

if args.trackfile:
    trackfile.Write()
    trackfile.Close()

