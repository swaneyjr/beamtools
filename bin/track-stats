#!/usr/bin/env python3

from argparse import ArgumentParser

import numpy as np
import ROOT as r

parser = ArgumentParser()
parser.add_argument('--in', dest='infile', required=True)
parser.add_argument('--out', required=True)
args = parser.parse_args()

f = r.TFile(args.infile)
hits = f.Get('hits')

f_out = r.TFile(args.out, 'recreate')
t = hits.CloneTree(0)

track_len = np.zeros(1, dtype=float)
track_dEdx = np.zeros(1, dtype=float)
track_sat = np.zeros(1, dtype=int)

t.Branch('track_len', track_len, 'track_len/d')
t.Branch('track_dEdx', track_dEdx, 'track_dEdx/d')
t.Branch('track_sat', track_sat, 'track_sat/i')

n = hits.GetEntries()
for i, hit in enumerate(hits):
    print(i+1, '/', n, end='\r')
    dx = max(hit.pix_x) - min(hit.pix_x)
    dy = max(hit.pix_y) - min(hit.pix_y)
    track_len[0] = (dx**2 + dy**2)**0.5 
    if hasattr(hit, 'pix_val'):
        track_dEdx[0] = sum(hit.pix_val) / track_len[0] if track_len[0] else -1
        track_sat[0] = np.sum(np.array(hit.pix_val) >= 1020)
    
    else:
        track_dEdx[0] = sum(hit.n_tot) / track_len[0] if track_len[0] else -1

    t.Fill()

f_out.Write()
f_out.Close()
